<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 配置bean -->
    <!-- 全类名，通过反射的方式由spring帮我们创建这个对象，id是用来标识这个对象的，
        name对应的是setter方法，用setter方法定义的java bean风格的属性名；
        如果此时把setter方法改为setName2，或者将成员变量name该为name2，则此处的name="name"就会报错。

        class: bean 的全类名，通过反射的方式在IOC容器中创建Bean，所以要求 Bean 中必须有无参构造器；
        id：如何获取bean呢，通过id获取bean。id唯一，标识容器中的bean。若id没有指定，Spring自动将权限
        定性为类名作为Bean的名字；id可以指定多个名字，名字之间可用逗号、分号或空格分隔。
        属性注入要求：必须有无参构造器。
    -->
    <bean id="helloWorld" class="com.dake.entity.HelloWorld">
        <property name="age" value="18"></property>
        <property name="name" value="zhangsan"></property>
    </bean>

    <!-- 通过构造方法来配置bean的属性 -->
    <bean id="car" class="com.dake.entity.Car">
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg value="ShangHai" index="1"></constructor-arg>
        <constructor-arg value="300000" type="double"></constructor-arg>
    </bean>

    <bean id="car2" class="com.dake.entity.Car">
        <constructor-arg value="Baoma"></constructor-arg>
        <constructor-arg value="ShangHai"></constructor-arg>
        <constructor-arg value="240"></constructor-arg>
    </bean>

    <!-- 通过构造方法注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器！ -->
    <bean id="car3" class="com.dake.entity.Car">
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <constructor-arg value="ShangHai" type="java.lang.String"></constructor-arg>
        <constructor-arg value="240" type="double"></constructor-arg>
    </bean>

    <bean id="car4" class="com.dake.entity.Car">
        <constructor-arg value="Baoma"></constructor-arg>
        <constructor-arg value="10"></constructor-arg>
        <constructor-arg value="240"></constructor-arg>
    </bean>


    <bean id="car5" class="com.dake.entity.Car">
        <constructor-arg value="Baoma"></constructor-arg>
        <constructor-arg value="10"></constructor-arg>
    </bean>

<!-- 字面值注入的方式-->
    <bean id="car6" class="com.dake.entity.Car">
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <constructor-arg value="10" type="java.lang.String"></constructor-arg>
        <constructor-arg type="int">
            <value>250</value>
        </constructor-arg>
    </bean>

<!-- 字面值注入的方式：特殊字符-->
    <bean id="car7" class="com.dake.entity.Car">
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <constructor-arg type="java.lang.String">
            <value><![CDATA[<ShangHai^>]]></value>
        </constructor-arg>
        <constructor-arg type="int">
            <value>250</value>
        </constructor-arg>
    </bean>

    <bean id="person" class="com.dake.entity.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <!--可以使用Property的ref属性建立bean之间的引用关系-->
        <property name="car" ref="car2"></property>
    </bean>

    <bean id="person1" class="com.dake.entity.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <!--也可以使用<ref>元素-->
        <property name="car">
            <ref bean="car2"></ref>
        </property>
    </bean>

    <!--内部Bean-->
    <bean id="person2" class="com.dake.entity.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <property name="car">
            <bean class="com.dake.entity.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="Changan"></constructor-arg>
                <constructor-arg value="200000" type="double"></constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="person3"  class="com.dake.entity.Person">
        <constructor-arg value="Jerry"></constructor-arg>
        <constructor-arg value="25"></constructor-arg>
        <constructor-arg ref="car"></constructor-arg>
    </bean>

    <bean id="person4"  class="com.dake.entity.Person">
        <constructor-arg value="Jerry"></constructor-arg>
        <constructor-arg value="25"></constructor-arg>
        <!--赋值null：null的专有标签，必须这么写。也可以不赋值，不写这个属性就可以了-->
        <!--<constructor-arg><null/></constructor-arg>-->
        <constructor-arg ref="car"></constructor-arg>
        <!--为级联属性赋值，注意：属性需要先初始化后才可以为级联属性赋值，否则报异常；
        和Struts2不同，Struts2可以-->
        <property name="car.maxSpeed" value="30"></property>
    </bean>

    <!--测试如何配置集合属性-->
    <bean id="person5"  class="com.dake.entity.Person">
        <property name="name" value="Mike"></property>
        <property name="age" value="27"></property>
       <property name="cars">
          <list>
              <ref bean="car"></ref>
              <ref bean="car2"></ref>
              <ref bean="car3"></ref>
          </list>
       </property>
    </bean>


</beans>
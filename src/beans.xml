<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--五种作用域中，request、session和global session三种作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用框架），
        只能用在基于web的Spring ApplicationContext环境。
    -->
    <!--    singleton单例bean配置，属于spring中的缺省配制-->
    <bean id="car01" class="com.dake.vo.Car" scope="singleton"></bean>

    <!--    prototype原型模式bean配置，每次调用getBean时实例化一个bean-->
    <bean id="car02" class="com.dake.vo.Car" scope="prototype"></bean>
    <!--  或者  -->
    <bean id="car02" class="com.dake.vo.Car" scope="false"></bean>

    <!-- request的Http请求创建各自的bean -->
    <bean id="loginAction" class="com.dake.vo.Car" scope="request"/>

    <!-- session级别的的Http Session请求，一个Session创建一个的bean
        针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，
        且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，
        而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。
        当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉
        ————————————————
        版权声明：本文为CSDN博主「fuzhongmin05」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
        原文链接：https://blog.csdn.net/fuzhongmin05/article/details/73389779
    -->
    <bean id="loginAction" class="com.dake.vo.Car" scope="session"/>

    <!--Global Session作用域，表示一个全局HTTP Sessio中一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效-->
    <bean id="loginAction" class="com.dake.vo.Car" scope="session"/>
</beans>